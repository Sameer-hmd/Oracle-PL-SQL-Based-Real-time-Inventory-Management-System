Oracle PL/SQL-Based Real-time Inventory Management System: Project Guide
This document provides a comprehensive guide to setting up and understanding the Oracle PL/SQL-based Real-time Inventory Management System project. It covers the objectives, the detailed steps involved, and the key components implemented in each phase.

Project Objective
The primary objective of this project is to design and implement a robust, highly optimized inventory management system using Oracle SQL and PL/SQL. The system focuses on real-time stock updates, automated reorder processes, and comprehensive reporting to manage product inventory efficiently.

Project Components and Steps
The project is broken down into five main steps, each building upon the previous one.

Step 1: Advanced Data Model (SQL Schema)
Purpose: To define the foundational structure of the database. A well-designed, normalized schema is crucial for data integrity, efficiency, and scalability.

Details:

Normalization: The schema is designed to 3rd Normal Form (3NF) or higher (BCNF where applicable) to minimize data redundancy and improve data integrity.

Key Entities:

Categories: Classifies products.

Suppliers: Stores information about product suppliers.

Products: Core product details, including reorder_threshold for automation.

Warehouses: Defines physical storage locations.

Inventory_Levels: The central table for current stock quantities, linking products to warehouses.

Customers: Customer details.

Sales_Orders & Sales_Order_Items: Records customer purchases.

Purchase_Orders & Purchase_Order_Items: Records orders placed with suppliers.

Audit_Logs: Generic table to track significant changes, especially to inventory.

Data Types & Constraints: Appropriate data types (e.g., NUMBER, VARCHAR2, TIMESTAMP, DECIMAL) are used. Constraints like PRIMARY KEY, FOREIGN KEY, NOT NULL, UNIQUE, and CHECK are extensively applied to enforce data integrity and business rules.

Sequences: Oracle sequences are used to generate unique identifiers for primary keys, ensuring automatic ID generation.

Indexing: Indexes are created on foreign key columns and other frequently queried columns to significantly improve query performance.

Step 2: Populate Tables with Sample Data
Purpose: To fill the newly created database tables with a substantial amount of realistic data. This is essential for testing the system's functionality, observing trigger behavior, and generating meaningful reports.

Details:

Volume: The script aims to insert 100-200 records across various tables (e.g., 70 customers, 30 products, numerous sales and purchase orders).

PL/SQL Blocks: Anonymous PL/SQL blocks with loops and DBMS_RANDOM are used to programmatically generate diverse and realistic data, including random names, addresses, quantities, prices, and dates.

Foreign Key Integrity: Data insertion carefully handles foreign key relationships by using subqueries to retrieve existing IDs, ensuring data consistency.

Performance Considerations: Temporarily disabling foreign key constraints during bulk inserts and re-enabling them afterwards is used as an optimization technique for faster data loading.

Sequence Management: Sequences are reset at the beginning of the script for clean data insertion if the script is run multiple times.

Step 3: Real-time Inventory Updates (Triggers & Procedures)
Purpose: To ensure that inventory levels are automatically and immediately adjusted whenever sales occur or new stock is received. This is critical for maintaining accurate, real-time inventory counts.

Details:

Triggers: PL/SQL AFTER triggers are implemented on Sales_Order_Items, Purchase_Order_Items, and Purchase_Orders tables.

TRG_SALES_ITEM_AFTER_INSERT: Decreases quantity_on_hand when a sales item is added. Includes FOR UPDATE to prevent concurrency issues and checks for insufficient stock.

TRG_SALES_ITEM_AFTER_UPDATE: Adjusts inventory based on changes in sales item quantities.

TRG_SALES_ITEM_AFTER_DELETE: Increases quantity_on_hand if a sales item is removed (e.g., order cancellation/return).

TRG_PURCHASE_ITEM_AFTER_INSERT: Increases quantity_on_hand when a purchase item is added, but only if the parent Purchase Order's status is 'Received'. Uses MERGE for efficient insert/update.

TRG_PURCHASE_ITEM_AFTER_UPDATE: Adjusts inventory based on changes in purchase item quantities, respecting the 'Received' status.

TRG_PURCHASE_ITEM_AFTER_DELETE: Decreases quantity_on_hand if a purchase item is removed from a 'Received' PO.

TRG_PURCHASE_ORDER_STATUS_UPDATE: A crucial trigger that handles bulk inventory adjustments when a Purchase_Order's po_status changes to or from 'Received'. It iterates through all items in the PO to add or deduct stock.

Error Handling: Extensive EXCEPTION blocks with RAISE_APPLICATION_ERROR are used to provide clear error messages and prevent invalid operations (e.g., selling more than available stock).

Concurrency Control: FOR UPDATE clauses are used in SELECT statements to lock rows during updates, preventing data inconsistencies in multi-user environments.

Audit Logging: All significant inventory changes (insertions, updates, deletions) triggered by these operations are logged in the Audit_Logs table, providing a historical record.

Warehouse Assumption: For simplicity, sales deductions and purchase receipts are assumed to occur at the 'Main Distribution Center' (Warehouse ID 1). In a production system, this logic would be more sophisticated.

Step 4: Automated Reordering System (Scheduled Jobs/DBMS_SCHEDULER)
Purpose: To automate the process of identifying low-stock products and generating purchase orders to replenish inventory, reducing manual oversight.

Details:

PL/SQL Package PKG_INVENTORY_AUTOMATION:

F_GET_DEFAULT_WAREHOUSE_ID (Function): A helper to retrieve the ID of the default warehouse, centralizing this configuration.

P_CREATE_REORDER_POS (Procedure):

Low Stock Identification: Uses a cursor to query Products and Inventory_Levels to find products where quantity_on_hand is below their reorder_threshold in the default warehouse.

Purchase Order Generation: For each identified low-stock product, it:

Creates a new Purchase_Order with a 'Pending' status, linked to the product's primary supplier.

Inserts a corresponding Purchase_Order_Item with a recommended_order_quantity (e.g., double the reorder threshold) and an estimated cost price.

Updates the total_amount of the newly created PO.

Logs the automated action in Audit_Logs.

Transaction Management: Uses COMMIT and ROLLBACK to ensure the entire reordering process is atomic.

DBMS_SCHEDULER: Oracle's built-in job scheduler is used to automate the execution of the P_CREATE_REORDER_POS procedure.

A job named JOB_AUTO_REORDER_INVENTORY is created.

It's configured to run daily at a specific time (e.g., 3:00 AM).

This ensures that inventory checks and reorder generations happen automatically without manual intervention.

Privileges: Requires appropriate Oracle privileges (CREATE PROCEDURE, CREATE JOB, MANAGE SCHEDULER) for the user executing the script.

Step 5: Comprehensive Reporting (Views, Stored Procedures, Functions)
Purpose: To provide various insights into sales, inventory, and operational data, enabling better business decisions.

Details:

Regular Views:

V_CUSTOMER_SALES_SUMMARY: Overview of customer orders.

V_PRODUCT_SALES_DETAILS: Detailed breakdown of products sold in orders.

V_CURRENT_INVENTORY_SNAPSHOT: Real-time view of stock levels, including stock_status (Below Threshold/Sufficient).

Materialized Views (MVs) for Performance:

MV_MONTHLY_SALES_BY_CATEGORY: Aggregates monthly sales revenue by category. REFRESH FAST ON COMMIT ensures near real-time updates for frequently accessed summary data.

MV_PRODUCT_PERFORMANCE_SUMMARY: Summarizes total quantity sold and revenue per product. REFRESH COMPLETE ON DEMAND is used for larger aggregates, allowing scheduled refreshes (e.g., nightly) for optimal performance.

Stored Procedures and Functions for Advanced Reports:

F_GET_PRODUCT_INVENTORY_TURNOVER (Function): Calculates a simplified inventory turnover ratio for a product over a period, indicating how quickly inventory is sold.

P_GENERATE_STOCK_MOVEMENT_REPORT (Procedure): Generates a detailed report of all inventory ins and outs (sales, purchases, manual adjustments) by querying the Audit_Logs table for a specified date range and optional warehouse. Output is formatted using DBMS_OUTPUT.PUT_LINE.

P_GET_SLOW_MOVING_INVENTORY (Procedure): Identifies products that have had no sales activity over a defined period (e.g., 90 days), helping to identify potentially obsolete or overstocked items. Output is also formatted using DBMS_OUTPUT.PUT_LINE.

How to Proceed with the Project
To set up and run this project in your Oracle environment, follow these steps:

Prepare your Oracle Environment:

Ensure you have access to an Oracle database (e.g., Oracle Express Edition, a cloud instance, or a local installation).

Use an SQL client like SQL Developer, SQL*Plus, or DBeaver to connect to your database.

Make sure the user you are connecting with has sufficient privileges (e.g., CREATE TABLE, CREATE SEQUENCE, CREATE PROCEDURE, CREATE TRIGGER, CREATE VIEW, CREATE MATERIALIZED VIEW, CREATE JOB, MANAGE SCHEDULER). If not, you might need to ask a DBA to grant them or log in as a user with broader permissions.

Execute Step 1: SQL Schema (DDL)

Open the code from the oracle_inventory_schema immersive artifact.

Run the entire script. This will create all the tables and sequences.

Important: The script includes DROP TABLE and DROP SEQUENCE statements at the beginning. This is useful for re-running the script during development, but be cautious if you have existing data you want to preserve.

Execute Step 2: Sample Data Insertion

Open the code from the oracle_inventory_sample_data immersive artifact.

Run the entire script. This will populate your tables with a large amount of sample data.

Verify: After running, you can execute SELECT COUNT(*) FROM <table_name>; for each table to confirm data insertion.

Execute Step 3: Real-time Inventory Triggers

Open the code from the oracle_inventory_triggers immersive artifact.

Run the entire script. This will create all the necessary triggers for automatic inventory adjustments and audit logging.

Verify: You can test these by manually inserting, updating, or deleting records in Sales_Order_Items or Purchase_Order_Items and then checking Inventory_Levels and Audit_Logs. For example:

-- Test sales trigger (will fail if stock is low)
INSERT INTO Sales_Order_Items (order_item_id, order_id, product_id, quantity, unit_price)
VALUES (sales_order_item_seq.NEXTVAL, (SELECT MIN(order_id) FROM Sales_Orders), (SELECT product_id FROM Products WHERE product_name = 'Laptop Pro X'), 1, 1200.00);
COMMIT;

-- Check inventory for Laptop Pro X
SELECT p.product_name, il.quantity_on_hand FROM Inventory_Levels il JOIN Products p ON il.product_id = p.product_id WHERE p.product_name = 'Laptop Pro X';
SELECT * FROM Audit_Logs ORDER BY change_date DESC FETCH FIRST 5 ROWS ONLY;

Execute Step 4: Automated Reordering System

Open the code from the oracle_reordering_system immersive artifact.

Run the entire script. This will create the PKG_INVENTORY_AUTOMATION package and schedule the JOB_AUTO_REORDER_INVENTORY job.

Verify:

Check if the job is scheduled: SELECT job_name, state, next_run_date FROM user_scheduler_jobs WHERE job_name = 'JOB_AUTO_REORDER_INVENTORY';

To manually test the reordering logic immediately:

First, ensure SET SERVEROUTPUT ON; is enabled in your SQL client.

Then, reduce the quantity_on_hand for some products in Inventory_Levels below their reorder_threshold to trigger the reorder:

UPDATE Inventory_Levels SET quantity_on_hand = 5 WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Laptop Pro X');
COMMIT;

Execute the procedure manually: EXEC PKG_INVENTORY_AUTOMATION.P_CREATE_REORDER_POS;

Check Purchase_Orders and Purchase_Order_Items for new entries, and Audit_Logs for the automated action.

Execute Step 5: Comprehensive Reporting

Open the code from the oracle_inventory_reporting immersive artifact.

Run the entire script. This will create all the views, materialized views, functions, and procedures for reporting.

Verify and Use:

Ensure SET SERVEROUTPUT ON; is enabled for procedures that print output.

Query the views: SELECT * FROM V_CURRENT_INVENTORY_SNAPSHOT;

Refresh materialized views if needed: EXEC DBMS_MVIEW.REFRESH('MV_PRODUCT_PERFORMANCE_SUMMARY', 'C');

Execute functions and procedures:

SELECT F_GET_PRODUCT_INVENTORY_TURNOVER(p_product_id => 1, p_start_date => SYSDATE - 365, p_end_date => SYSDATE) FROM DUAL;
EXEC P_GENERATE_STOCK_MOVEMENT_REPORT(p_start_date => SYSDATE - 30, p_end_date => SYSDATE);
EXEC P_GET_SLOW_MOVING_INVENTORY(p_days_threshold => 120);

Conclusion
This project provides a robust and comprehensive demonstration of advanced Oracle SQL and PL/SQL capabilities for building a real-time inventory management system. By following these steps, you will have a fully functional database solution that showcases your skills in:

Database Schema Design and Normalization

Data Insertion and Management (including large datasets)

Real-time Data Manipulation using Triggers

Automated Processes with PL/SQL Packages and DBMS_SCHEDULER

Performance Optimization with Materialized Views

Advanced Reporting using Views, Procedures, and Functions

Error Handling and Audit Logging

This project will be an excellent addition to your resume, highlighting your ability to design and implement complex, production-ready database solutions.